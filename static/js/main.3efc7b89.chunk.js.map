{"version":3,"sources":["components/Card/index.js","components/CardList/index.js","components/SearcBox/index.js","components/ErrorBoundary/index.js","components/Scroll/index.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","robot","idx","key","SearchBox","searchChange","onChange","type","placeholder","ErrorBoundary","state","hasError","error","info","this","setState","props","children","Component","Scroll","style","overflowY","border","height","App","searchField","onSearchChange","event","inputValue","target","value","prevState","fetch","then","response","json","responseData","setTimeout","filteredRobots","filter","toLowerCase","includes","robotsList","length","backgroundColor","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"2OAeeA,EAZF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC5B,OACC,yBAAKC,UAAU,sDACd,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAyCG,IAAI,KACrD,6BACC,4BAAKL,GACL,2BAAIC,MCKOK,EAXE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAElB,OACC,6BACEA,EAAOC,KAAI,SAACC,EAAOC,GACnB,OAAO,kBAAC,EAAD,CAAMC,IAAKF,EAAMP,GAAIA,GAAIO,EAAMP,GAAIF,KAAMS,EAAMT,KAAMC,MAAOQ,EAAMR,aCG9DW,EATG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACC,oCACC,2BAAOC,SAAUD,EAAcV,UAAU,mCACzCY,KAAK,SAASC,YAAY,oBCcdC,E,4MAhBdC,MAAQ,CACPC,UAAU,G,gEAGOC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACN,0DAEDG,KAAKE,MAAMC,a,GAdQC,aCYbC,EAZA,SAACH,GACf,OACC,yBAAKI,MAAO,CACXC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAEPP,EAAMC,WCiEKO,G,kNAhEdd,MAAQ,CACPX,OAAQ,GACR0B,YAAa,I,EAGdC,eAAiB,SAACC,GACjB,IAAMC,EAAaD,EAAME,OAAOC,MAChC,EAAKf,UAAS,SAACgB,GACd,OAAO,2BAAKA,GAAZ,IAAuBN,YAAaG,Q,kEAWjB,IAAD,OACnBI,MAAM,8CACJC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACLC,YAAW,WACV,EAAKtB,UAAS,SAACgB,GACd,OAAO,2BACHA,GADJ,IAEChC,OAAQqC,SAGR,U,+BAII,IAAD,OACFE,EAAiBxB,KAAKJ,MAAMX,OAAOwC,QAAO,SAACtC,GAChD,OAAOA,EAAMT,KAAKgD,cAAcC,SAAS,EAAK/B,MAAMe,YAAYe,kBAG7DE,EAAa,KAQjB,OAHCA,EAHI5B,KAAKJ,MAAMX,OAAO4C,OAGT,kBAAC,EAAD,CAAU5C,OAAQuC,IAFlB,iDAMb,yBAAK3C,UAAU,MACd,2CACA,kBAAC,EAAD,CAAWU,aAAcS,KAAKY,iBAC9B,wBAAIN,MAAO,CAAEwB,gBAAiB,OAAQtB,OAAQ,OAAQC,OAAQ,SAC9D,kBAAC,EAAD,KACC,kBAAC,EAAD,KACEmB,S,GA1DWG,IAAM3B,YCIJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAjD,GACLkD,QAAQlD,MAAMA,EAAMmD,a","file":"static/js/main.3efc7b89.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Card = ({ name, email, id }) =>{\n\treturn (\n\t\t<div className=\"bg-light-green tc dib br3 pa3 ma3 grow b2 shadow-5\">\n\t\t\t<img src={`https://robohash.org/${id}?200x200`}  alt=\"\"/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card","import React from 'react'\nimport Card from '../Card';\n\nconst CardList = ({robots}) => {\n\t\n\treturn (\n\t\t<div>\n\t\t\t{robots.map((robot, idx) => {\n\t\t\t\treturn <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\n\t\t\t})}\n\t\t</div>\n\t)\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<>\n\t\t\t<input onChange={searchChange} className=\"pa3 ba b--green bg-lightest-blue\" \n\t\t\ttype='search' placeholder='Search Robots' />\n\t\t</>\n\t)\n}\n\nexport default SearchBox","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component{\n\t\n\tstate = {\n\t\thasError: false\n\t}\n\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({hasError: true})\n\t}\n\t\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>Oops! Something went wrong</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary","import React from 'react'\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{\n\t\t\toverflowY: 'scroll',\n\t\t\tborder: '1px solid black',\n\t\t\theight: '500px'\n\t\t}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\n\nexport default Scroll;","import React from 'react'\n//import axios from 'axios'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearcBox'\nimport ErrorBoundaries from '../components/ErrorBoundary'\nimport Scroll from '../components/Scroll'\nimport './App.css'\n\nclass App extends React.Component {\n\n\tstate = {\n\t\trobots: [],\n\t\tsearchField: ''\n\t}\n\n\tonSearchChange = (event) => {\n\t\tconst inputValue = event.target.value\n\t\tthis.setState((prevState) => {\n\t\t\treturn { ...prevState, searchField: inputValue }\n\t\t})\n\t}\n\n\t// async componentDidMount(){\n\t// \tconst users = await axios('https://jsonplaceholder.typicode.com/users')\n\t// \tthis.setState((prevState) => {\n\t// \t\treturn { ...prevState, robots: users.data }\n\t// \t})\n\t// }\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then(responseData => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.setState((prevState) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...prevState,\n\t\t\t\t\t\t\trobots: responseData\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}, 1000)\n\t\t\t})\n\t}\n\n\trender() {\n\t\tconst filteredRobots = this.state.robots.filter((robot) => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n\t\t})\n\n\t\tlet robotsList = null;\n\n\t\tif (!this.state.robots.length) {\n\t\t\trobotsList = <h2>Loading Data ... </h2>\n\t\t} else {\n\t\t\trobotsList = <CardList robots={filteredRobots} />\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"tc\">\n\t\t\t\t<h1>RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t<hr style={{ backgroundColor: 'cyan', border: 'none', height: '1px' }} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundaries>\n\t\t\t\t\t\t{robotsList}\n\t\t\t\t\t</ErrorBoundaries>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}